version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-inventory_db}
      POSTGRES_USER: ${DATABASE_USER:-pf_matiasb}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-tomi2000}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-pf_matiasb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.cloud
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: "postgresql://${DATABASE_USER:-pf_matiasb}:${DATABASE_PASSWORD:-tomi2000}@postgres:5432/${DATABASE_NAME:-inventory_db}?schema=public"
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:4000}
      CORS_DEV_ORIGINS: ${CORS_DEV_ORIGINS:-http://localhost:8080}
      CORS_ALLOW_CREDENTIALS: "true"
      CORS_DEVELOPMENT_MODE: "false"
      PORT: 4000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/public/uploads:/app/public/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Frontend React/Nginx
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${BACKEND_URL:-http://localhost:4000}
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Nginx Reverse Proxy (Opcional - para SSL y mejor routing)
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
